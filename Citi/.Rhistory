mi_lista <- list("Introducción", "a", "la", "Programación", "Estadística", "con", "R")
mi_lista
?lapply()
formals(lapply)
mayusculas <- lapply(mi_lista, toupper)
mayusculas
class(mayusculas)
asa_datos <- read.csv(swirl_temp/ASA_estadisticasPasajeros(3).csv)
asa_datos <- read.csv("swirl_temp/ASA_estadisticasPasajeros(3).csv")
asa_datos
view(asa_datos)
View(asa_datos)
lapply(asa_datos, class)
asa_datos$Descripcion
unique(asa_datos$Descripcion)
unique(asa_datos$Estado)
sum(asa_datos$Pasajeros.nacionales)
asa_pasajeros <- asa_datos[,c("Pasajeros.nacionales","Pasajeros.internacionales")]
asa_pasajeros
View(asa_pasajeros)
lapply(asa_pasajeros,sum)
sapply(asa_pasajeros,sum)
total_ pasajeros <- sapply(asa_pasajeros,sum)
total_pasajeros <- sapply(asa_pasajeros,sum)
total_pasajeros
table(asa_datos$Estado)
tapply(asa_datos$Pasajeros.nacionales, asa_datos$Estado, sum)
tapply(asa_datos$Pasajeros.nacionales, asa_datos$Estado, mean)
tapply(asa_datos$Pasajeros.nacionales, asa_datos$Codigo.IATA, mean)
demo(graphics)
plot(1:5)
plot(c(1, 2, 3), c(4, 5, 6))
?plot()
?plot
plot(c(1, 2, 3), c(4, 5, 6), type="l")
plot(6:10, type = "s")
plot(1:10, type = "b")
plot(1:5, main = "Mi gráfica")
plot(1:5, main = "Mi gráfica", xlab = "x", ylab = "y")
points(c(1,5), c(4,2), col = "green")
lines(c(1,4), c(2,5), col = "yellow")
abline(h = 3, col = "red", lty = 2)
abline(h = 1:5, v = 1:5 col = "purple")
abline(h = 1:5, v = 1:5, col = "purple")
data("iris")
class(iris)
head(iris)
plot(iris)
plot(iris$Petal.Length, iris$Petal.Width)
hist(iris$Petal.Length, col = "red")
hist(iris$Petal.Length, col = "red", freq = FALSE)
hist(iris$Petal.Length, col = "red", breaks = 5)
?boxplot
boxplot(Sepal.Width ~ Species, data = iris, col = 2:4)
pie(c(50,50,50), labels = levels(iris$Species))
swirl()
demo(graphics)
plot(1:5)
plot(c(1, 2, 3), c(4, 5, 6))
?plot
plot(c(1, 2, 3), c(4, 5, 6), type="l")
plot(6:10, type = "s")
plot(1:10, type = "b")
plot(1:5, main="Mi gráfica")
plot(1:5, main = "Mi gráfica", xlab = "x", ylab = "y")
points(c(1, 5), c(4, 2), col="green")
lines(c(1, 4), c(2, 5), col="yellow")
abline(h=3,col="red",lty=2)
abline(h=1:5,v=1:5, col="purple")
data("iris")
class(iris)
head(iris)
plot(iris)
plot(iris$Petal.Length, iris$Petal.Width)
hist(iris$Petal.Length, col="red")
hist(iris$Petal.Length, col="red", freq=FALSE)
hist(iris$Petal.Length, col="red", breaks=5)
?boxplot
boxplot(Sepal.Width ~ Species, data=iris, col=2:4)
pie(c(50, 50, 50), labels=levels(iris$Species))
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
select_language()
Sys.getlocale("LC_ALL", "en_US.UTF-8")
Sys.setlocale("LC_ALL", "en_US.UTF-8")
swirl()
library(swirl)
select_language()
install_course_github("ifunam", "programacion-estadistica-r")
Sys.setlocale("LC_ALL", "en_US.UTF-8")
swirl()
swirl()
?par
par()
par_org <- par()
par_orig <- par()
par("col")
par(col = "blue")
View(iris)
data("iris")
plot(iris)
par(col)
par("col")
plot(iris, col = iris$Species)
colnames(iris)
play()
iris[colnames()]
info()
nxt()
colnames(iris)
info()
iris
skip()
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
par(pch = 15)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch = "A")
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
plot(1:26, pch = 0:25)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch = 21, bg = "blue")
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, cex = 2)
legend(x = 4.5, y = 7, legend = levels(iris$Species), col = c(1:3), pch = 16)
par(par_orig)
colors()
help("grep")
grep("yellow", colors(), value = TRUE)
length("colors")
length(colors())
palette()
plot(1:8, main = "Colores por índice", pch = 17, cex = 3)
plot(1:8, col = 1:8, main = "Colores por índice", pch = 17, cex = 3)
plot(1:12, col = 1:12, main = "Colores reciclados", pch = 18, cex = 3)
paleta_arcoiris <- rainbow(10)
paleta_arcoiris
palette(paleta_arcoiris)
palette
palette()
plot(1:10, col = 1:10, main = "Paleta Arcoiris", pch = 17, cex = 3)
paleta_calida <- heat.colors(10)
palette(paleta_calida)
plot(1:10, col = 1:10, main = "Paleta Cálida", pch = 17, cex = 3)
play()
c("red", "green", "#0019FFFF")
plot(c("red", "green", "#0019FFFF"))
plot(1:3,c("red", "green", "#0019FFFF"),  pch = 17, cex = 3)
palette( c("red", "green", "#0019FFFF"))
plot(1:10, col = 1:10, main = "Paleta", pch = 17, cex = 3)
nxt
nxt()
mi_paleta <- c("red", "green", "#0019FFFF")
plot(1:10, col = mi_paleta, main = "Mi Paleta", pch = 17, cex = 3)
palette(mi_paleta)
plot(1:10, col = 1:10, main = "Mi Paleta", pch = 17, cex = 3)
palette("default")
plot(1:20, type = "n")
text(5, 5, "¡Hola Mundo!")
?text
text(11, 11, "¡Hola Mundo! x2", cex = 2)
text(7, 7, "¡Hola Mundo! con Serif", family = "serif")
text(7, 7, "¡Hola Mundo con Serif!", family = "serif")
text(9, 9, "¡Hola Mundo con Mono!", family = "mono")
text(13, 13, "¡Hola Mundo con Sans!", family = "sans")
demo(plotmath)
demo(plotmath)
plot(1:10, type = "n", main = expression(alpha + beta))
plot(1:10, type = "n", xlab = expression(paste("Valores de ", x^phi1)))
?plotmath
t <- 10
plot(1:t, main = substitute(paste("La gráfica del vector 1:", x),list(x = t)))
t <- 20
plot(1:t, main = substitute(paste("La gráfica del vector 1:", x),list(x = t)))
?substitute
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
library(swirl)
select_language()
install_course_github("ifunam", "programacion-estadistica-r")
Sys.setlocale("LC_ALL", "en_US.UTF-8")
swirl()
swirl()
install.packages("rgl", dependencies = TRUE)
swirl()
swirl()
library(swirl)
select_language()
Sys.setlocale("LC_ALL", "en_US.UTF-8")
install_course_github("ifunam", "programacion-estadistica-r")
Sys.setlocale("LC_ALL", "en_US.UTF-8")
swirl()
3+7
mi_variable <- (180 / 6) - 15
mi_variable
y <- c(561, 1105, 1729, 2465, 2821)
print(y)
1:100
c(1.1, 2.2, 3.3, 4.4) - c(1, 1, 1, 1)
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) - c(1, 2)
ls()
"¡Hola Mundo!"
colores <- c("rojo", "azul", "verde", "azul", "rojo")
colores
complejo <- 2+1i
mi_variable == 15
length(complejo) <- 3
complejo
2^1024
0/0
fecha_primer_curso_R <- Sys.Date()
fecha_primer_curso_R
vector("numeric", length = 10)
vector("character", length = 10
)
vector("logical", length = 10)
list(0, "Hola", TRUE)
c(T, 19, 1+3i)
vector("numeric", length = 5)
c <- vector("numeric", length=5)
c
as.logical(c)
class(c)
class(as.logical(c))
m <- matrix(data=1:12,nrow=4,ncol=3)
m
factor(colores)
data.frame(llave=y, color=colores)
mi_variable <- (180 / 60) - 15
mi_variable
install.packages("rgl",dependencies = TRUE)
swirl()
install.packages("curl", dependencies = TRUE)
install.packages("curl", dependencies = TRUE)
install.packages("curl", dependencies = TRUE)
install.packages("curl", dependencies = TRUE)
install.packages("rgl", dependencies = TRUE)
swirl()
bye()
swirl()
library(swirl)
select_language()
install_course_github("ifunam", "programacion-estadistica-r")
Sys.setlocale("LC_ALL", "en_US.UTF-8")
swirl()
install.packages("rgl", dependencies = TRUE)
swirl()
swirl()
library(rgl)
install.packages("rgl", dependencies = TRUE)
library(rgl)
install.packages("rgl")
library("rgl")
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("rgl")
swirl()
install.packages("curl", dependencies = TRUE)
install.packages("httr", dependencies = TRUE)
install.packages("httr", dependencies = TRUE)
library(swirl)
select_language()
install_course_github("ifunam", "programacion-estadistica-r")
Sys.setlocale("LC_ALL", "en_US.UTF-8")
swirl()
texto <- c("Hola Mundo")
texto <- "Hola Mundo"
texto <- paste("Hola", "mundo")
texto <- paste("Hola", "Mundo")
skip()
texto[1]
texto[2]
?substring
substring(texto, 1, 5)
substring(texto, 7, 11)
substring(texto, 7, 11) <- "Swirl"
texto
nchar(texto)
paste("¡Adios", "Mundo!")
paste("¡Adiós", "Mundo!")
paste("¡Adiós", "Mundo!", sep = "_")
i <- 9
sprintf("el cuadrado de %d ed %d", i, i^2)
sprintf("El cuadrado de %d ed %d", i, i^2)
sprintf("El cuadrado de %d es %d", i, i^2)
?sprintf
strsplit("Me/gusta/programar/en/R", "/")
chartr("o", "a", "¡Hola Mundo!")
patron <- "H(a|ä|ae)ndel"
musicos
grep(patron, musicos)
nuevo_patron <- ".(a|ä|ae|e)ndel"
grep(nuevo_patron, musicos)
regexpr(patron, musicos)
gregexpr(patron, "Georg Friedrich Händel, en inglés George Frideric Handel fue un compositor alemán.")
?regexpr
texto <- "¡Hola Mundo!"
texto[1]
texto[2]
?substring
substring(texto, 7, 11)
substring(texto, 7, 11) <- "Swirl"
texto
nchar(texto)
paste("¡Adiós", "Mundo!")
paste("¡Adiós", "Mundo!", sep = "_")
i <- 9
sprintf("El cuadrado de %d es %d",i, i^2)
?sprintf
strsplit("Me/gusta/programar/en/R", "/")
chartr("o", "a", "¡Hola Mundo!")
patron <- "H(a|ä|ae)ndel"
musicos
grep(patron, musicos)
nuevo_patron <- ".(a|ä|ae|e)ndel"
grep(nuevo_patron, musicos)
regexpr(patron, musicos)
gregexpr(patron, "Georg Friedrich Händel, en inglés George Frideric Handel fue un compositor alemán.")
)regexpr()
?regeº
?regexpr
?Normal
help("Distributions")
?rbinom
rbinom(1, 7, 0.5)
resultado <- rbinom(1, 1000, 0.5)
resultado <- rbinom( 1000, 7, 0.5)
resultado <- rbinom(100000, 7, 0.5)
tail(resultado)
tail(resultado > 5)
mean(resultado > 5)
?set.sed
?set.seed
library(plyr)
library(tidyverse)
library(magrittr)
n_cte <- 10000
n_prd <- 10
sn_vals <- c('Citigold','Priority','Citiblue','Citi@Work')
cv_vals <- c('Retirad@', 'Solter@', 'Familia')
rk_vals <- c('AAA','AA','A','BBB','BB','B')
pd_vals <- c('TC','CP','CN','CLI','DB','EFE','AAC')
risk_level <- function(sn, cv) {6*rbeta(1, which(sn==sn_vals), which(cv==cv_vals))} %>% ceiling %>% rk_vals[.]
ctes <- tibble(idcte = 1:n_cte, seg_negocio = sample(sn_vals, n_cte, T, prob=c(0.05, 0.1, 0.35, 0.5)), ciclo_vida=sample(cv_vals, n_cte, T, prob=c(0.1, 0.4, 0.5))) %>% rowwise %>% mutate(seg_riesgo = risk_level(seg_negocio, ciclo_vida)) %>% ungroup
# Mandar/Recibir de front end:
## tabla S x P de ELEGIBILIDADES
eleg <- adply(pd_vals, 1, function(x) {tibble(seg_riesgo=rk_vals, prod=x) %>% rowwise %>% mutate(eleg=runif(1)<0.4)}, .id=NULL) %>% spread(prod, eleg) %>% left_join(ctes %>% group_by(seg_riesgo) %>% tally %>% ungroup, .)
## tabla S x P de TASAS
tasa <- eleg %>% select(-n) %>% gather(prod, eleg, -seg_riesgo) %>% rowwise %>% mutate(tasa=if_else(eleg, 0.6*runif(1), NULL)) %>% select(-eleg) %>% spread(prod, tasa)
# Salida de back end:
## tabla S x P de RESPUESTA ESPERADA
resp <- eleg %>% select(-n) %>% gather(prod, eleg, -seg_riesgo) %>% rowwise %>% mutate(resp=if_else(eleg, 0.3*runif(1), NULL)) %>% select(-eleg) %>% spread(prod, resp)
## tabla S x P de NPV(Y2)
npv_y2 <- eleg %>% select(-n) %>% gather(prod, eleg, -seg_riesgo) %>% rowwise %>% mutate(npv_y2 = if_else(eleg, 1000*rgamma(1, 2, 1) - 1000, NULL)) %>% select(-eleg) %>% spread(prod, npv_y2)
## tabla S x P x T de GENERIC KPI
kpi_gen <- eleg %>% select(-n) %>% gather(prod, eleg, -seg_riesgo) %>% rowwise %>% do(., data.frame(., t=1:24, stringsAsFactors=F) %>% mutate(kpi = if_else(eleg, 50*rgamma(24, 2, 1), NULL))) %>% ungroup
shiny::runApp('Documents/Citi/App')
ans[is.na(ans)] <- 0
ans[,2:8][ans[,2:8] > 0] <- 1
ans.m = melt(ans, id.var="seg_riesgo")
ans <- resp
ans[is.na(ans)] <- 0
ans[,2:8][ans[,2:8] > 0] <- 1
ans.m = melt(ans, id.var="seg_riesgo")
ans.s <- ddply(ans.m, .(variable),
summarize,
value = sum(value))
p <- ggplot(ans.s, aes(x = variable, y = value, fill=variable)) +
geom_bar(stat="identity") +
labs(x="Producto", y="Ctes")+
scale_fill_brewer()
ggplotly(p)
runApp('Documents/Citi/App')
View(kpi_gen)
View(kpi_gen)
runApp('Documents/Citi/App')
View(resp)
View(ans.m)
View(resp)
View(ans.m)
View(ans.s)
View(ans.m)
View(resp)
View(npv_y2)
api_key <- 'VPovWEQASHxSsmV4OnNa2CNBF'
api_secret <- 'N7zAtMqbP0GOPaigQAJNO1GZKGBQB4eyeSgnXQOIA1rPVDl453'
access_token <- '4174084272-gIbbaseHzrFCo0AojzauUOfqLY5hQCqSWbVn18a'
access_token_secret <- '9elz3CB7MlLbAG9VsxZK81u6eaVF9fwqr9GPOLFqIOqfK'
oracion <-"Hola cΓ³mo te va amigo @tqm #rt te amamos bby aΓ±os salud estΓ‘ 12 :)"
limpiar = function(oracion)
{
# limpiamos las oraciones con substitucion regex:
oracion = gsub('[[:cntrl:]]', '', oracion)
oracion = iconv(oracion, to='ASCII//TRANSLIT')
oracion = gsub('[[:punct:]]', '', oracion)
oracion = gsub("[[:digit:]]", "", oracion)
oracion = gsub('\\d+', '', oracion)
# removemos emojis
oracion = iconv(oracion, 'latin1', 'ASCII',sub="")
oracion = tolower(oracion)
# removemos elementos propios del tweet
oracion = gsub("rt", "", oracion) # quitar retweets
oracion = gsub("@\\w+", "", oracion) # quitar menciones
oracion = gsub("http\\w+", "", oracion)  # quitar links http
oracion = gsub("[ |\t]{2,}", " ", oracion) # quitar tabs
oracion = gsub("^ ", "", oracion)  # quitar espacios en blanco al inicio
oracion = gsub(" $", "", oracion) # quitar espacios en blanco al final
return(oracion)
}
source("Keys.R")
library ("devtools")
library ("twitteR")
library("httr")
library("dplyr")
source("Keys.R")
setwd("~/Desktop/Tweets")
source("Keys.R")
source("Limpiar.R")
args <- commandArgs(TRUE)
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
busqueda <- c("pensiones", "ahorro", "finanzas personales", "afore",
"retiro", "educacion financiera")
busqueda <- paste(busqueda, collapse = " OR ")
cuentas <- c("@AMAFORE_mx","@XXIBanorte","@Afore_InverCap",
"@CONSAR_mx","@MetLifeAforeMx")
cuentas <- paste(cuentas, collapse = " OR ")
no.tweets <- 10
l_ctas <- list()
t_cuentas <- searchTwitter(cuentas, n=no.tweets, lang = 'es')
feed_cta <- twListToDF(t_cuentas)
c_cta <- limpiar(feed_cta)
cta_corpus <- Corpus(VectorSource(c_cta))
library ("twitteR")
library("httr")
library("tm")
library("wordcloud")
cta_corpus <- Corpus(VectorSource(c_cta))
cta_corpus <- tm_map(cta_corpus, removeWords, stopwords("spanish"))
wordcloud(cta_corpus,min.freq = 5, scale=c(8,0.2),
colors=brewer.pal(8, "Dark2"),  random.color= TRUE, random.order = FALSE, max.words = 150)
Need_to_know<-data.frame(news_headlines_text,news_description)
setwd("~/Desktop/News")
library(rvest)
library(dplyr)
web_address<-'http://www.excelsior.com.mx/nacional#view-10'
webpage_code<-read_html(web_address)
news_headlines <- html_nodes(webpage_code,'.item-titulo-nota-canal')
news_headlines_text <- html_text(news_headlines)
head(news_headlines_text)
news_description <- html_text(html_nodes(webpage_code,'.widget_newscorpau_capi_sync_collection:nth-child(1) .standfirst'))
head(news_description)
news_description<-gsub("\n\t\t\t\t","",news_description)
news_description<-gsub("\n\t","",news_description)
head(news_description)
Need_to_know<-data.frame(news_headlines_text,news_description)
web_address<-'http://www.excelsior.com.mx/nacional#view'
webpage_code<-read_html(web_address)
news_headlines <- html_nodes(webpage_code,'.item-titulo-nota-canal')
news_headlines_text <- html_text(news_headlines)
head(news_headlines_text)
news_description <- html_text(html_nodes(webpage_code,'.widget_newscorpau_capi_sync_collection:nth-child(1) .standfirst'))
news_description <- html_text(html_nodes(webpage_code,'.jpx-pu-container-open , p'))
head(news_description)
news_description<-gsub("\n\t\t\t\t","",news_description)
news_description<-gsub("\n\t","",news_description)
head(news_description)
news_description<-gsub("[[:cntrl:]]","",news_description)
head(news_description)
news_description<-gsub("\\d+","",news_description)
head(news_description)
news_description<-gsub("[[:cntrl:]]","",news_description)
head(news_description)
news_description <- html_text(html_nodes(webpage_code,'.jpx-pu-container-open , p'))
head(news_description)
news_description<-gsub("[[:cntrl:]]","",news_description)
head(news_description)
news_description<-gsub("^ ","",news_description)
head(news_description)
Need_to_know<-data.frame(news_headlines_text,news_description)
news_headlines <- html_nodes(webpage_code,'.item-titulo-nota-canal')
news_headlines_text <- html_text(news_headlines)
head(news_headlines_text)
news_description <- html_text(html_nodes(webpage_code,'.jpx-pu-container-open , p'))
head(news_description)
news_description<-gsub("[[:cntrl:]]","",news_description)
news_description<-gsub("^ ","",news_description)
head(news_description)
news_description <- news_description [2:7]
Need_to_know<-data.frame(news_headlines_text,news_description)
setwd("~/Desktop/prueba_s/Citi")
library(shiny)
runApp("App")
library(plyr)
library(tidyverse)
library(magrittr)
n_cte <- 10000
n_prd <- 10
sn_vals <- c('Citigold','Priority','Citiblue','Citi@Work')
cv_vals <- c('Retirad@', 'Solter@', 'Familia')
rk_vals <- c('AAA','AA','A','BBB','BB','B')
pd_vals <- c('TC','CP','CN','CLI','DB','EFE','AAC')
risk_level <- function(sn, cv) {6*rbeta(1, which(sn==sn_vals), which(cv==cv_vals))} %>% ceiling %>% rk_vals[.]
ctes <- tibble(idcte = 1:n_cte, seg_negocio = sample(sn_vals, n_cte, T, prob=c(0.05, 0.1, 0.35, 0.5)), ciclo_vida=sample(cv_vals, n_cte, T, prob=c(0.1, 0.4, 0.5))) %>% rowwise %>% mutate(seg_riesgo = risk_level(seg_negocio, ciclo_vida)) %>% ungroup
# Mandar/Recibir de front end:
## tabla S x P de ELEGIBILIDADES
eleg <- adply(pd_vals, 1, function(x) {tibble(seg_riesgo=rk_vals, prod=x) %>% rowwise %>% mutate(eleg=runif(1)<0.4)}, .id=NULL) %>% spread(prod, eleg) %>% left_join(ctes %>% group_by(seg_riesgo) %>% tally %>% ungroup, .)
## tabla S x P de TASAS
tasa <- eleg %>% select(-n) %>% gather(prod, eleg, -seg_riesgo) %>% rowwise %>% mutate(tasa=if_else(eleg, 0.6*runif(1), NULL)) %>% select(-eleg) %>% spread(prod, tasa)
# Salida de back end:
## tabla S x P de RESPUESTA ESPERADA
resp <- eleg %>% select(-n) %>% gather(prod, eleg, -seg_riesgo) %>% rowwise %>% mutate(resp=if_else(eleg, 0.3*runif(1), NULL)) %>% select(-eleg) %>% spread(prod, resp)
## tabla S x P de NPV(Y2)
npv_y2 <- eleg %>% select(-n) %>% gather(prod, eleg, -seg_riesgo) %>% rowwise %>% mutate(npv_y2 = if_else(eleg, 1000*rgamma(1, 2, 1) - 1000, NULL)) %>% select(-eleg) %>% spread(prod, npv_y2)
## tabla S x P x T de GENERIC KPI
kpi_gen <- eleg %>% select(-n) %>% gather(prod, eleg, -seg_riesgo) %>% rowwise %>% do(., data.frame(., t=1:24, stringsAsFactors=F) %>% mutate(kpi = if_else(eleg, 50*rgamma(24, 2, 1), NULL))) %>% ungroup
runApp('App')
