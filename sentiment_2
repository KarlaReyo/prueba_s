setwd("C:/Users/kr79024/Desktop")

library(tm)
library(RTextTools)
library(e1071)
library(dplyr)
library(caret)
# Library for parallel processing
#library(doMC)
#registerDoMC(cores=detectCores())


noticias<- read.csv("noticias.csv", stringsAsFactors = FALSE)
glimpse(noticias)

# hacemos aleatorio el dataframe
set.seed(123)
noticias <- noticias[sample(nrow(noticias)), ]
noticias <- noticias[sample(nrow(noticias)), ]
glimpse(noticias)

# convertir la variable clase de caracteres a factores
noticias$class <- as.factor(noticias$class)

# hacemos un corpus
corpus <- Corpus(VectorSource(noticias$text))
corpus
inspect(corpus[1:3])

# funcion para limpiar corpus
corpus.clean <- corpus %>%
  tm_map(content_transformer(tolower)) %>% 
  tm_map(removePunctuation) %>%
  tm_map(removeNumbers) %>%
  tm_map(removeWords, stopwords(kind="es")) %>%
  tm_map(stripWhitespace)

# crear matriz de terminos
dtm <- DocumentTermMatrix(corpus.clean)
inspect(dtm[40:50, 10:15])

# particionamos datos
noticias.train <- noticias[1:1500,]
noticias.test <- noticias[1501:2000,]

dtm.train <- dtm[1:1500,]
dtm.test <- dtm[1501:2000,]

corpus.clean.train <- corpus.clean[1:1500]
corpus.clean.test <- corpus.clean[1501:2000]

# seleccion de variables/palabras
dim(dtm.train)
# identificamos palabras que aparecen al menos 5 veces
fivefreq <- finnoticiasreqTerms(dtm.train, 5)
length((fivefreq))

# construimos la matriz de terminos con la resriccion de frecuencia 
dtm.train.nb <- DocumentTermMatrix(corpus.clean.train, control=list(dictionary = fivefreq))
dim(dtm.train.nb)

dtm.test.nb <- DocumentTermMatrix(corpus.clean.test, control=list(dictionary = fivefreq))
dim(dtm.train.nb)

# funcion para convertir la frecuencia de palabras en etiquetas de si (presencia) o no (ausencia)
convert_count <- function(x) {
  y <- ifelse(x > 0, 1,0)
  y <- factor(y, levels=c(0,1), labels=c("No", "Si"))
  y
}

# applicamos la funcion convert_count para obtener el DTM final de entrenamiento y prueba
trainNB <- apply(dtm.train.nb, 2, convert_count)
testNB <- apply(dtm.test.nb, 2, convert_count)

# entrenamos el clasificador
system.time( classifier <- naiveBayes(trainNB, noticias.train$class, laplace = 1) )

# usamos el clasificador de NB que construimos para hacer predicciones en la muestra de entrenamiento
system.time( pred <- predict(classifier, newdata=testNB) )

# creamos una tabla que compare las predcciones con los resultados reales
table("Predicciones"= pred,  "Actual" = noticias.test$class )

# Preparamos la matriz de confusion
conf.mat <- confusionMatrix(pred, noticias.test$class)

conf.mat
conf.mat$byClass
conf.mat$overall
conf.mat$overall['Accuracy']
